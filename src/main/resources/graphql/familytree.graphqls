type Query {
    version: Version
    message: String!
    relayId: ID
    getPersonById(id: ID!): Person
    getPersonByName(name: String): Person
    getAllPeople(offset: Int!): [Person] 
    getEveryone(offset: Int!): AllPeople
}

type Version {
    current: String
    previous: String
}

type AllPeople {
    people: [Person]!
}

type Person {
    id: String!,
    cursor: String!,
    name: String!,
    image: String,
    relationships(type: String): [Relationship]!
}

#extend type Query {
#    getPersonById(id: ID!): Person
#    getPersonByName(name: String): Person
#    getAllPeople(offset: Int!): [Person]!
#}

type Relationship {
    from: Person!
    to: Person!
    relationship: String!
}

type Mutation {
    createPerson(name: String, image: String): [Person]!
}