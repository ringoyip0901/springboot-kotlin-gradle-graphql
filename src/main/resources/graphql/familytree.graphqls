schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    # coffee: String!
    # getPersonById(id: ID!): Person
    # getPersonByName(name: String): Person
    # getAllPeople(offset: Int): [Person]
    # getEveryone(offset: Int): AllPeople
    allMembers(first: Int, cursor: String): MembersCollection
} 

type MembersCollection {
    edges: [Edge]
    pageInfo: PageInfo!
    totalCount: Int
}

type Edges {
    edges: [Edge]
    pageInfo: PageInfo
}

type Edge {
    cursor: String
    node: Member
}

type PageInfo {
    hasNextPage: Boolean
    hasPreviousPage: Boolean
    startCursor: String
    endCursor: String
}

interface Member {
    id: String!,
    name: String!
    image: String
}

type Person implements Member {
    id: String!
    name: String!
    image: String
    title: String
}

type Hero implements Member {
    id: String!
    name: String!
    image: String
    ability: String
}

enum ABILITY {
    WEATHER_CONTROL
    SUPER_STRENGTH
    REGENERATION
}

type Ability {
    power: ABILITY
    description: String
}

type Mutation {
    createPerson(name: String, image: String): Edges!
}

type Subscription {
    timer: Tick
    subscribeToFamily(first: Int): Edges
    getEveryone(offset: Int): AllPeople
}

type Tick {
    x: String
}

type AllPeople {
    allPeople(name: String, image: String, first: Int, after: String): Edges
}

