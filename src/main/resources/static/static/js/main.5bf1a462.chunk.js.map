{"version":3,"sources":["apollo-envir.js","CreateNewMember.tsx","GetFamily.tsx","App.tsx","serviceWorker.js","index.js"],"names":["httpLink","HttpLink","uri","wsLink","SubscriptionClient","reconnect","WebSocketLink","link","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","gql","then","res","ADD_PERSON","CreateNewMember","image","name","useMutation","addPerson","data","onSubmit","e","preventDefault","variables","value","placeholder","ref","node","type","GET_FAMILY_SUBSCRIBE","GetFamily","useSubscription","offset","after","loading","error","console","log","useState","id","renderedData","getEveryone","allPeople","edges","map","i","key","src","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ocAUA,IAAMA,EAAW,IAAIC,IAAS,CAC1BC,IAAK,kCAOHC,GAJqB,IAAIC,qBAAmB,oCAAqC,CAAEC,WAAW,IAIrF,IAAIC,IAAc,CAC7BJ,IAAK,qCAMHK,EAAOC,aAET,YAAgB,IAAbC,EAAY,EAAZA,MACOC,EAAaC,YAAkBF,GACrC,MACwB,wBAApBC,EAAWE,MACc,iBAAzBF,EAAWG,YAGnBV,EACAH,GAGEc,EAAS,IAAIC,IAAa,CAC5BR,OACAS,MAAO,IAAIC,MAGfH,EACCL,MAAO,CACJA,MAAOS,YAAF,OAMRC,MAAM,SAAAC,GAAG,OAAIA,EAAG,QAChBD,MAAM,SAAAC,GAAG,OAAIA,KAECN,Q,0UClDf,IAAMO,EAAaH,YAAH,KA4CDI,EA9BmB,WAChC,IAAIC,EACAC,EAFkC,EAGRC,YAAYJ,GAHJ,mBAG/BK,EAH+B,UAGlBC,KACpB,OACE,0BACEC,SAAU,SAAAC,GACRA,EAAEC,iBACFJ,EAAU,CAAEK,UAAW,CAAEP,KAAMA,EAAKQ,MAAOT,MAAOA,EAAMS,SACxDR,EAAKQ,MAAQ,GACbT,EAAMS,MAAQ,KAGhB,2BACEC,YAAY,OACZC,IAAK,SAAAC,GACHX,EAAOW,KAGX,2BACEF,YAAY,QACZC,IAAK,SAAAC,GACHZ,EAAQY,KAGZ,4BAAQC,KAAK,UAAb,gB,+2BCtCmBlB,YAAH,KAgBJA,YAAH,KAhBf,IAwBMmB,EAAuBnB,YAAH,KA8FXoB,EA9Ea,WAAO,IAAD,EACGC,YAAgBF,EAAuB,CACpEN,UAAW,CACPS,OAAQ,EACRC,MAAO,OAHPC,EADsB,EACtBA,QAASC,EADa,EACbA,MAAOhB,EADM,EACNA,KAMxBiB,QAAQC,IAAIlB,GAPkB,MAQEmB,mBAAS,CAAEC,GAAI,OARjB,6BA4ChC,GAAIL,EAAS,OAAO,2CACpB,GAAIC,EAAO,OAAO,yCAClB,IAAMK,EAAerB,GAAQA,EAAKsB,YAAYC,UAAUC,MACxD,OACE,6BACGH,EAAaI,KAAI,SAACjB,EAAWkB,GAAZ,OACd,yBAAKC,IAAKD,GAAG,uBAAGC,IAAKD,GAAIlB,EAAKA,KAAKX,MAAS,yBAAK+B,IAAKpB,EAAKA,KAAKZ,YAEpE,kBAAC,EAAD,QC9ESiC,EAZO,WACpB,OACE,kBAAC,IAAD,CAAgB1C,OAAQA,GACtB,yBAAK2C,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,UCAUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.5bf1a462.chunk.js","sourcesContent":["import { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport ApolloClient from \"apollo-client\";\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {gql} from \"apollo-boost\";\nimport { SubscriptionClient } from 'subscriptions-transport-ws'\n\n// Create an http link:\nconst httpLink = new HttpLink({\n    uri: 'http://localhost:8080/graphql'\n});\n\nconst subscriptionClient = new SubscriptionClient('ws://localhost:8080/subscriptions', { reconnect: false });\n\n// Create a WebSocket link:\n// const wsLink = new WebSocketLink(subscriptionClient)\nconst wsLink = new WebSocketLink({\n    uri: \"ws:localhost:8080/subscriptions\"\n})\n\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n    // split based on operation type\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        );\n    },\n    wsLink,\n    httpLink,\n);\n\nconst client = new ApolloClient({\n    link,\n    cache: new InMemoryCache()\n})\n\nclient\n.query ({\n    query: gql`\n        {\n            message\n        }\n    `,\n})\n.then (res => res['data'])\n.then (res => res);\n\nexport default client;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nconst ADD_PERSON = gql`\n  mutation ($name: String!, $image: String) {\n    createPerson(name: $name, image: $image) {\n        edges {\n            node {\n                id\n                name\n                image\n            }\n        }\n    }\n  }\n`\n\nconst CreateNewMember: React.FC = () => {\n  let image: any;\n  let name: any;\n  const [addPerson, { data }] = useMutation(ADD_PERSON);\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        addPerson({ variables: { name: name.value, image: image.value } });\n        name.value = \"\";\n        image.value = \"\";\n      }}\n    >\n      <input\n        placeholder=\"Name\"\n        ref={node => {\n          name = node;\n        }}\n      />\n      <input\n        placeholder=\"image\"\n        ref={node => {\n          image = node;\n        }}\n      />\n      <button type=\"submit\">Add Person</button>\n    </form>\n  )\n}\n\nexport default CreateNewMember;","import React, {useEffect, useState} from \"react\";\nimport {useQuery, useSubscription} from '@apollo/react-hooks';\nimport {gql} from 'apollo-boost';\nimport CreateNewMember from './CreateNewMember'\n\nconst GET_FAMILY_QUERY = gql`\n subscription ($offset: Int!, $after: String){\n   getEveryone(offset: $offset) {\n       allPeople(first: $offset, after: $after) {\n           edges {\n             node {\n               id\n               name\n               image\n             }\n           }\n       }\n   }\n }\n`\n\nconst GET_TIMER = gql`\n    subscription getTimerSub {\n      timer {\n        x\n      }\n    }\n`\n\nconst GET_FAMILY_SUBSCRIBE = gql`\n  subscription subscribeToFamily($offset: Int, $after: String) {\n    getEveryone(offset: $offset) {\n        allPeople(first: $offset, after: $after) {\n          edges {\n            node {\n              id\n              name\n              image\n            }\n          }\n        }\n    }\n  }\n\n`\nconst GetFamily: React.FC = () => {\n    const { loading, error, data } = useSubscription(GET_FAMILY_SUBSCRIBE,  {\n        variables: {\n            offset: 1,\n            after: \"1\"\n        }\n    })\n    console.log(data)\n  const [variables, setVariables] = useState({ id: \"pc\" })\n  // const { loading, error, data } = useSubscription(GET_FAMILY_SUBSCRIBE, {\n  //   variables: {\n  //     offset: 1,\n  //     after: \"1\"\n  //   }\n  // }); // if you want to just do a regular query reading\n\n  // const { loading, error, data } = useSubscription(GET_FAMILY_SUBSCRIBE, {\n  //   variables: {\n  //       offset: 1,\n  //       after: \"1\"\n  //\n  //   onSubscriptionData: (subscribedData) => console.log(\"subscribed Data: \", subscribedData)\n  // })\n\n  // useEffect(() => subscribeToMore({\n  //   document: GET_FAMILY_SUBSCRIBE,\n  //   variables: {\n  //     offset: 1,\n  //     after: \"1\"\n  //   },\n  //   updateQuery: (prev: any, {subscriptionData}: any) => {\n  //     console.log(\"Prev: \", prev);\n  //     console.log(\"Sub: \", subscriptionData.data)\n  //     if (!subscriptionData.data) return prev;\n  //     return Object.assign({}, prev, {...subscriptionData.data});\n  //   }\n  // }), [])\n\n  const onChange = (e: any) => {\n    setVariables({\n      id: e.target.value\n    })\n  }\n\n  if (loading) return <div>Loading...</div>\n  if (error) return <div>Error...</div>\n  const renderedData = data && data.getEveryone.allPeople.edges;\n  return (\n    <div>\n      {renderedData.map((node: any, i: number) =>\n          <div key={i}><p key={i}>{node.node.name}</p><img src={node.node.image} /></div>\n      )}\n      <CreateNewMember />\n    </div>\n  )\n}\n\n{/*<button onClick={() =>*/}\n{/*    fetchMore({*/}\n{/*        query: GET_ALL_PEOPLE,*/}\n{/*        variables: {*/}\n{/*            //offset: data.getAllPeople.length, //this value is the position of the array that fetchMore should start fetching from*/}\n{/*            cursor*/}\n{/*        },*/}\n{/*        updateQuery: (prevResult, { fetchMoreResult }) => {*/}\n{/*            const previous = prevResult.getAllPeople;*/}\n{/*            const newResults = fetchMoreResult.getAllPeople;*/}\n{/*            const newCursor = fetchMoreResult.getAllPeople.cursor;*/}\n{/*            console.log(\"Previous Results: \", previous);*/}\n{/*            console.log(\"New Result: \", newResults)*/}\n{/*            return {*/}\n{/*                getAllPeople: [...previous, ...newResults],*/}\n{/*            }*/}\n{/*        }*/}\n{/*    })}>Show More Family*/}\n{/*</button>*/}\n\n\nexport default GetFamily;","import React, { useState } from \"react\";\nimport { ApolloProvider } from '@apollo/react-hooks'\n// import client from \"./apollo.js\"\nimport client from './apollo-envir'\nimport \"./App.css\";\nimport GetFamily from \"./GetFamily\";\n\nconst App: React.FC = (): any => {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <GetFamily />\n        </header>\n      </div>\n    </ApolloProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}