type Query {
    version: Version
    message: String!
    relayId: ID
    getPersonById(id: ID!): Person
    getPersonByName(name: String): Person
    getAllPeople(offset: Int): [Person] 
    getEveryone(offset: Int): AllPeople
}


type Version {
    current: String
    previous: String
}

type AllPeople {
    people(name: String, image: String, count: Int, cursor: String): [Person]!
    allPeople(name: String, image: String, first: Int, cursor: String): Edges
}

type Edges {
    edges: [Edge]
    pageInfo: PageInfo
}

type Edge {
    cursor: String
    node: Person
}

 type PageInfo {
     hasNextPage: Boolean
     hasPreviousPage: Boolean,
     startCursor: String,
     endCursor: String
 }

type Person {
    id: String!,
    name: String!,
    image: String,
    relationships(type: String): [Relationship]!
}

#extend type Query {
#    getPersonById(id: ID!): Person
#    getPersonByName(name: String): Person
#    getAllPeople(offset: Int!): [Person]!
#}

type Relationship {
    from: Person!
    to: Person!
    relationship: String!
}

type Mutation {
    createPerson(name: String, image: String): [Person]!
}